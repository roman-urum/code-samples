<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlertSeverity_ColorCodeRegExError" xml:space="preserve">
    <value>Color code should be an html color code (e.g. #FAB56C)</value>
  </data>
  <data name="ConditionIdValidation_ValidationError" xml:space="preserve">
    <value>Condition identifier must be specified if DefaultType equals to Condition and mustn't be specified if DefaultType equals to Customer</value>
  </data>
  <data name="ElementStringLengthAttribute_ValidationError" xml:space="preserve">
    <value>The element of the field {0} must be a string with a minimum length of {1} and maximum length of {2}</value>
  </data>
  <data name="ElementValueTypeValidationAttribute_ValidationError" xml:space="preserve">
    <value>Value type does not match the type of element.</value>
  </data>
  <data name="EnumMemberAttribute_ValidationError" xml:space="preserve">
    <value>The {0} field doesn't belong to the enumeration</value>
  </data>
  <data name="ErrorCode_ApiAccessTokenInvalid" xml:space="preserve">
    <value>Security token/certificate was not provided or invalid</value>
  </data>
  <data name="ErrorCode_InternalServerError" xml:space="preserve">
    <value>Unspecified server error</value>
  </data>
  <data name="ErrorCode_InvalidRequest" xml:space="preserve">
    <value>Invalid parameter value(s)</value>
  </data>
  <data name="ForbidDefaultNotNullableValueAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} couldn't contain default value</value>
  </data>
  <data name="GreaterThanAttribute_ValidationError" xml:space="preserve">
    <value>{0} should be greater than {1}</value>
  </data>
  <data name="GreaterThanZero_ValidationError" xml:space="preserve">
    <value>Value for {0} must be greater than Zero.</value>
  </data>
  <data name="IANATimeZoneAttribute_ValidationError" xml:space="preserve">
    <value>Valid IANA (Olson) time zone must be specified in the field {0}</value>
  </data>
  <data name="ItemsRequired_ValidationError" xml:space="preserve">
    <value>{0} must have at least one element</value>
  </data>
  <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} is too long. Please, make it shorter than {1} characters</value>
  </data>
  <data name="Measurement_NotFound" xml:space="preserve">
    <value>Measurement with such identifier doesn't exist</value>
  </data>
  <data name="NotEmptyStringAttribute_ValidationError" xml:space="preserve">
    <value>{0} should not be empty string</value>
  </data>
  <data name="NotNullAlertSeverity_ValidationError" xml:space="preserve">
    <value>Alert severity is required if Alert flag is set to TRUE</value>
  </data>
  <data name="NotNullAnsweredUtc_ValidationError" xml:space="preserve">
    <value>The {0} field is required if alert is set to TRUE</value>
  </data>
  <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} should be within range {1} - {2}</value>
  </data>
  <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>The {0} field is required</value>
  </data>
  <data name="RequiredByElementTypeAttribute_ValidationError" xml:space="preserve">
    <value>Value is required for specified element type.</value>
  </data>
  <data name="RequiredIfNotEmptyAttribute_ValidationError" xml:space="preserve">
    <value>{0} is required due to {1} not being empty</value>
  </data>
  <data name="RequiredIfTrue_ValidationError" xml:space="preserve">
    <value>{0} is required due to {1} being equal to {2}</value>
  </data>
  <data name="SeverityRangeAttribute_ValidationError" xml:space="preserve">
    <value>Severity should be greater than 0</value>
  </data>
  <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} must be a string with a maximum length of {1}</value>
  </data>
  <data name="Threshold_NotFoundError" xml:space="preserve">
    <value>Threshold doesn't exist</value>
  </data>
  <data name="UniqueListAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} contains duplicated items</value>
  </data>
  <data name="UniqueStringsListAttribute_ValidationError" xml:space="preserve">
    <value>The field {0} contains duplicated items</value>
  </data>
  <data name="ValidateMaximumValueForVitalAttribute_ValidationError" xml:space="preserve">
    <value>Invalid MaximumValue (maximum {1} allowed) entered for current type of Vital</value>
  </data>
  <data name="ValidateUnitForVitalAttribute_ValidationError" xml:space="preserve">
    <value>Invalid Unit entered for current type of Vital</value>
  </data>
</root>